#include "Oled.h"
#include "stm32f4xx_hal.h"

// Includi altri header per HAL, GPIO...


// OLED::OLED(I2C_HandleTypeDef* i2cHandle) : i2cDevicePtr(i2cHandle) {
//     // eventuale codice aggiuntivo del costruttore
// }

void OLED::sendCommand(uint8_t command) {
    uint8_t control = 0x00; // Co = 0, D/C# = 0
    uint8_t data[2] = { control, command };
    HAL_I2C_Master_Transmit(i2cDevicePtr, OLED_ADDR, data, 2, HAL_MAX_DELAY);
}

void OLED::sendData(uint8_t data) {
    uint8_t control = 0x40; // Co = 0, D/C# = 1
    uint8_t databyte[2] = { control, data };
    HAL_I2C_Master_Transmit(i2cDevicePtr, OLED_ADDR, databyte, 2, HAL_MAX_DELAY);
}

void OLED::init() {
    HAL_Delay(100);
    sendCommand(0xAE); // display off
    sendCommand(0xD5);
    sendCommand(0x80);
    sendCommand(0xA8);
    sendCommand(0x3F);
    sendCommand(0xD3);
    sendCommand(0x00);
    sendCommand(0x40);
    sendCommand(0x8D);
    sendCommand(0x14);
    sendCommand(0x20);
    sendCommand(0x00);
    sendCommand(0xA1);
    sendCommand(0xC8);
    sendCommand(0xDA);
    sendCommand(0x12);
    sendCommand(0x81);
    sendCommand(0xCF);
    sendCommand(0xD9);
    sendCommand(0xF1);
    sendCommand(0xDB);
    sendCommand(0x40);
    sendCommand(0xA4);
    sendCommand(0xA6);
    sendCommand(0xAF);

}

void OLED::fill(uint8_t pattern) {
    for (uint8_t page = 0; page < 8; page++) {
        sendCommand(0xB0 + page);
        sendCommand(0x00);
        sendCommand(0x10);
        for (uint8_t col = 0; col < 128; col++) {
            sendData(pattern);
        }
    }
}

void OLED::setCursor(uint8_t x, uint8_t y) {
    sendCommand(0xB0 + y);
    sendCommand(0x00 + (x & 0x0F));
    sendCommand(0x10 + (x >> 4));
}

void OLED::drawChar(uint8_t x, uint8_t y, char c) {
    if (c < 0x20 || c > 0x7F) c = '?';
    setCursor(x, y);
    for (int i = 0; i < 5; i++) {
        sendData(font5x7[c - 0x20][i]);
    }
    sendData(0x00);
}

void OLED::print(uint8_t x, uint8_t y, const char* str) {
    while (*str) {
        drawChar(x, y, *str++);
        x += 6;
        if (x + 6 >= OLED_WIDTH) {
            x = 0;
            y++;
        }
        if (y >= 8) break;
    }
}

void OLED::clearArea(uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
    for (uint8_t page = y; page < y + height; page++) {
        setCursor(x, page);
        for (uint8_t col = 0; col < width; col++) {
            sendData(0x00);
        }
    }
}

void OLED::drawBitmap(const unsigned char* bitmap, uint8_t x, uint8_t y, uint8_t width, uint8_t height) {
    // for (uint8_t page = 0; page < 8; page++) {
    //     setCursor(0, page);
    //     for (uint8_t col = 0; col < 128; col++) {
    //         sendData(bitmap[page * 128 + col]);
    //     }
    // }
    
    uint8_t pages = (height + 7) / 8;
    for (uint8_t page = 0; page < pages; page++) {
        setCursor(x, y + page);
        for (uint8_t col = 0; col < width; col++) {
            sendData(bitmap[page * width + col]);
        }
    }
    

    
}
// Definizione della matrice del font 5x7
const uint8_t OLED::font5x7[96][5] = 
    {
    // ASCII 0x20 (space) - 0x7F (~)
    {0x00,0x00,0x00,0x00,0x00}, // ' '
    {0x00,0x00,0x5F,0x00,0x00}, // '!'
    {0x00,0x07,0x00,0x07,0x00}, // '"'
    {0x14,0x7F,0x14,0x7F,0x14}, // '#'
    {0x24,0x2A,0x7F,0x2A,0x12}, // '$'
    {0x23,0x13,0x08,0x64,0x62}, // '%'
    {0x36,0x49,0x55,0x22,0x50}, // '&'
    {0x00,0x05,0x03,0x00,0x00}, // '''
    {0x00,0x1C,0x22,0x41,0x00}, // '('
    {0x00,0x41,0x22,0x1C,0x00}, // ')'
    {0x14,0x08,0x3E,0x08,0x14}, // '*'
    {0x08,0x08,0x3E,0x08,0x08}, // '+'
    {0x00,0x50,0x30,0x00,0x00}, // ','
    {0x08,0x08,0x08,0x08,0x08}, // '-'
    {0x00,0x60,0x60,0x00,0x00}, // '.'
    {0x20,0x10,0x08,0x04,0x02}, // '/'
    {0x3E,0x51,0x49,0x45,0x3E}, // '0'
    {0x00,0x42,0x7F,0x40,0x00}, // '1'
    {0x42,0x61,0x51,0x49,0x46}, // '2'
    {0x21,0x41,0x45,0x4B,0x31}, // '3'
    {0x18,0x14,0x12,0x7F,0x10}, // '4'
    {0x27,0x45,0x45,0x45,0x39}, // '5'
    {0x3C,0x4A,0x49,0x49,0x30}, // '6'
    {0x01,0x71,0x09,0x05,0x03}, // '7'
    {0x36,0x49,0x49,0x49,0x36}, // '8'
    {0x06,0x49,0x49,0x29,0x1E}, // '9'
    {0x00,0x36,0x36,0x00,0x00}, // ':'
    {0x00,0x56,0x36,0x00,0x00}, // ';'
    {0x08,0x14,0x22,0x41,0x00}, // '<'
    {0x14,0x14,0x14,0x14,0x14}, // '='
    {0x00,0x41,0x22,0x14,0x08}, // '>'
    {0x02,0x01,0x51,0x09,0x06}, // '?'
    {0x32,0x49,0x79,0x41,0x3E}, // '@'
    {0x7E,0x11,0x11,0x11,0x7E}, // 'A'
    {0x7F,0x49,0x49,0x49,0x36}, // 'B'
    {0x3E,0x41,0x41,0x41,0x22}, // 'C'
    {0x7F,0x41,0x41,0x22,0x1C}, // 'D'
    {0x7F,0x49,0x49,0x49,0x41}, // 'E'
    {0x7F,0x09,0x09,0x09,0x01}, // 'F'
    {0x3E,0x41,0x49,0x49,0x7A}, // 'G'
    {0x7F,0x08,0x08,0x08,0x7F}, // 'H'
    {0x00,0x41,0x7F,0x41,0x00}, // 'I'
    {0x20,0x40,0x41,0x3F,0x01}, // 'J'
    {0x7F,0x08,0x14,0x22,0x41}, // 'K'
    {0x7F,0x40,0x40,0x40,0x40}, // 'L'
    {0x7F,0x02,0x04,0x02,0x7F}, // 'M'
    {0x7F,0x04,0x08,0x10,0x7F}, // 'N'
    {0x3E,0x41,0x41,0x41,0x3E}, // 'O'
    {0x7F,0x09,0x09,0x09,0x06}, // 'P'
    {0x3E,0x41,0x51,0x21,0x5E}, // 'Q'
    {0x7F,0x09,0x19,0x29,0x46}, // 'R'
    {0x46,0x49,0x49,0x49,0x31}, // 'S'
    {0x01,0x01,0x7F,0x01,0x01}, // 'T'
    {0x3F,0x40,0x40,0x40,0x3F}, // 'U'
    {0x1F,0x20,0x40,0x20,0x1F}, // 'V'
    {0x3F,0x40,0x38,0x40,0x3F}, // 'W'
    {0x63,0x14,0x08,0x14,0x63}, // 'X'
    {0x07,0x08,0x70,0x08,0x07}, // 'Y'
    {0x61,0x51,0x49,0x45,0x43}, // 'Z'
    {0x00,0x7F,0x41,0x41,0x00}, // '['
    {0x02,0x04,0x08,0x10,0x20}, // '\'
    {0x00,0x41,0x41,0x7F,0x00}, // ']'
    {0x04,0x02,0x01,0x02,0x04}, // '^'
    {0x40,0x40,0x40,0x40,0x40}, // '_'
    {0x00,0x01,0x02,0x04,0x00}, // '`'
    {0x20,0x54,0x54,0x54,0x78}, // 'a'
    {0x7F,0x48,0x44,0x44,0x38}, // 'b'
    {0x38,0x44,0x44,0x44,0x20}, // 'c'
    {0x38,0x44,0x44,0x48,0x7F}, // 'd'
    {0x38,0x54,0x54,0x54,0x18}, // 'e'
    {0x08,0x7E,0x09,0x01,0x02}, // 'f'
    {0x0C,0x52,0x52,0x52,0x3E}, // 'g'
    {0x7F,0x08,0x04,0x04,0x78}, // 'h'
    {0x00,0x44,0x7D,0x40,0x00}, // 'i'
    {0x20,0x40,0x44,0x3D,0x00}, // 'j'
    {0x7F,0x10,0x28,0x44,0x00}, // 'k'
    {0x00,0x41,0x7F,0x40,0x00}, // 'l'
    {0x7C,0x04,0x18,0x04,0x78}, // 'm'
    {0x7C,0x08,0x04,0x04,0x78}, // 'n'
    {0x38,0x44,0x44,0x44,0x38}, // 'o'
    {0x7C,0x14,0x14,0x14,0x08}, // 'p'
    {0x08,0x14,0x14,0x18,0x7C}, // 'q'
    {0x7C,0x08,0x04,0x04,0x08}, // 'r'
    {0x48,0x54,0x54,0x54,0x20}, // 's'
    {0x04,0x3F,0x44,0x40,0x20}, // 't'
    {0x3C,0x40,0x40,0x20,0x7C}, // 'u'
    {0x1C,0x20,0x40,0x20,0x1C}, // 'v'
    {0x3C,0x40,0x30,0x40,0x3C}, // 'w'
    {0x44,0x28,0x10,0x28,0x44}, // 'x'
    {0x0C,0x50,0x50,0x50,0x3C}, // 'y'
    {0x44,0x64,0x54,0x4C,0x44}, // 'z'
    {0x00,0x08,0x36,0x41,0x00}, // '{'
    {0x00,0x00,0x7F,0x00,0x00}, // '|'
    {0x00,0x41,0x36,0x08,0x00}, // '}'
    {0x10,0x08,0x08,0x10,0x08}, // '~'
    };

   